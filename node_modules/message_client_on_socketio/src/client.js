var EventEmitter = require('events').EventEmitter;
var io = require('socket.io-client');

/**
 * MessageServiceClient simply keep tracks of steps' positions inside a viewport.
 * Apart from the static helper functions and the `scroll` function, a roll instance doesn't depend on DOM manipulation.
 * That means you can use a MessageServiceClient instance in contexts other than DOM.
 */
export default class MessageServiceClient extends EventEmitter {

  /**
   * Create a new MessageServiceClient.
   * @param viewSize viewport size (single dimension)
   */
  constructor(data) {
    super();
    this.roomName = data.roomName;
    this.publishKey = data.publishKey;
    this.subscribeKey = data.subscribeKey;
    this.socket = null;
    this.callback = null;
  }

  createSocket() {
      var socket = io(this.roomName, { transports: ['websocket'] });
      this.socket = socket;
      return socket;
  }

  getSocket() {
    return this.socket;
  }

  addTheListener(data) {
    for (var k in data) {
        if (data.hasOwnProperty(k)) {
            this.callback = data[k];
            if(k == 'addMessage'){
                (this.socket).on('addMessage', function(message) {
                    // data[k].bind(message)(message);
                    data[k](message);
                });
            }
            else if(k == 'connect'){
                (this.socket).on('connect', function() {
                    data[k]();
                });
            }
        }
    }
  }

  addTheListenerWithCallback(event, callback) {
    callback = callback || function () {};
    if(event == 'updateUsersList'){
        (this.socket).on(event, function(users, clear) {
            return callback(users, clear)
        });
    }
    else if(event == 'removeUser'){
        console.log(event);
        (this.socket).on(event, function(userId) {
            return callback(userId)
        });
    }



  }

  socketEmit(event, data){
      (this.socket).emit(event, data);
  }

  static requestSocket1(path, callback) {
      callback = callback || function () {}
      var socket = io(path, { transports: ['websocket'] });
      return callback(null, socket)
  }

}
